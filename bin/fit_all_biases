#!/usr/bin/env python
"""
 fit_all_biases
 
 author: Nick Hand
 contact: nhand@berkeley.edu
 creation date: 07/05/2014
"""
import os
from flipper import flipperDict
import argparse

def main(params):
    """
    Compute P(k, mu) for all the desired samples
    """
    params = flipperDict.flipperDict()
    params.readFromFile(args.param_file)
    
    # define the various sample tags we need 
    sample_tags = ['all', 'centrals', 'centrals_typeA', 'centrals_typeB', \
                    'satellites', 'satellites_typeA', 'satellites_typeB']
    
    uncollided = "(collided == 0) or ((collided == 1) and (resolved == 1))"
    galaxy_restricts = [None, "(type == central)", "(type == central)", "(type == central)",\
                        "(type == satellite)", "(type == satellite)", "(type == satellite)"]
    halo_restricts = [None, None, "(N_sat == 0)", "(N_sat > 0)", None, "(N_sat == 1)", "(N_sat > 1)"]
    
    collided_tags = [None, "uncollided_0.4Mpc"]
        
    # loop over each sample type
    for i, sample_tag in enumerate(sample_tags):
        
        # uncollided vs full
        for collided_tag in collided_tags:
                        
            # the ouput tag
            if collided_tag is None:
                params['output_tag'] = 'PB00halos_%s_bias' %(sample_tag)
            else:
                params['output_tag'] = 'PB00halos_%s_%s_bias' %(sample_tag, collided_tag)
                
            print "fitting bias for tag '%s'..." %params['output_tag']
                
            # the restrictions
            params['galaxy_restrict'] = galaxy_restricts[i]
            if collided_tag is not None:
                if params['galaxy_restrict'] is not None:
                    params['galaxy_restrict'] = "%s and (%s)" %(params['galaxy_restrict'], uncollided)
                else:
                    params['galaxy_restrict'] = uncollided
            
            params['halo_restrict'] = halo_restricts[i] 
            
            # write out the parameter file
            params.writeToFile(args.param_file)
            
            # now call the fit_bias script
            ans = os.system("fit_bias %s" %(args.param_file))
                   
            if ans:
                raise ValueError("Error computing bias for tag '%s'" %params['output_tag'])
        

#-------------------------------------------------------------------------------    
if __name__ == '__main__':
    
    # parse the input arguments
    desc = "compute biases for all samples"
    parser = argparse.ArgumentParser(description=desc)
    
    parser.add_argument('param_file', type=str, help="the parameter file")
    args = parser.parse_args()
       
    main(args)
