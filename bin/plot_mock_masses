#!/usr/bin/env python
"""
 plot_mock_masses
 
 author: Nick Hand
 contact: nhand@berkeley.edu
 creation date: 07/02/2014
"""
import argparse
import hod_mock
import pylab
from utils import utilities

def two_floats(value):
    values = value.split()
    if len(values) != 2:
        raise argparse.ArgumentError
    values = map(float, values)
    return values
           
#-------------------------------------------------------------------------------
if __name__ == '__main__':
    
    desc = "plot the mass distribution from a mock catalog"
    parser = argparse.ArgumentParser(description=desc)
    
    h = 'the name of the file holding the mock catalog'
    parser.add_argument('mock_file', type=str, help=h)
    
    h = 'the mass column name' 
    parser.add_argument('mass_col', type=str, help=h)
    
    h = 'the mass units' 
    parser.add_argument('--mass-units', type=str, help=h)
    
    h = 'the string representations of any galaxy restrictions' 
    parser.add_argument('--galaxy-restrict', type=str, help=h)
    
    h = 'the string representation of any halo restrictions' 
    parser.add_argument('--halo-restrict', type=str, help=h)
    
    # add the plotting arguments
    h = 'the limits of the x axis'
    parser.add_argument('--xlim', type=two_floats, help=h)
    h = 'the limits of the y axis'
    parser.add_argument('--ylim', type=two_floats, help=h)
    h = 'the location of the legend'
    parser.add_argument("--legend-loc", type=str, help=h)
    h = 'the number of columns in the legend'
    parser.add_argument("--ncol", type=int, help=h)
    h = 'the fontsize of the legend'
    parser.add_argument('--legend-size', type=float, help=h)
    h = "the title to add to the plot"
    parser.add_argument("--title", type=str, help=h)
    h = 'the fontsize of the title'
    parser.add_argument('--title-size', type=float, help=h)
    
    args = parser.parse_args()
    
    if args.legend_loc is not None:
        try:
            args.legend_loc = float(args.legend_loc)
        except:
            pass
            
    # lod the mock
    mock = hod_mock.load(args.mock_file)
    
    # restrictions
    if args.galaxy_restrict is not None:
        mock.restrict_galaxies(args.galaxy_restrict)
    if args.halo_restrict is not None:
        mock.restrict_halos(args.halo_restrict)
    
    # plot the hod 
    kwargs = {}
    if args.mass_units is not None:
        kwargs['mass_units'] = args.mass_units
    ax = mock.plot_mass_distribution(args.mass_col, **kwargs)
    
    # now handle the plotting arguments
    plot_options = {k : v for k, v in vars(args).iteritems() if v is not None}
    utilities.apply_plotting_arguments(ax, **plot_options)
    pylab.show()
    
#end main

#-------------------------------------------------------------------------------
    
    
    
