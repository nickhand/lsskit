#!/usr/bin/env python
"""
 compute_all_spectra
 
 author: Nick Hand
 contact: nhand@berkeley.edu
 creation date: 07/05/2014
"""
import os
from flipper import flipperDict
import argparse

def main(params):
    """
    Compute P(k, mu) for all the desired samples
    """
    params = flipperDict.flipperDict()
    params.readFromFile(args.param_file)
    
    # define the various sample tags we need 
    sample_tags = ['all', 'centrals', 'centrals_typeA', 'centrals_typeB', \
                    'satellites', 'satellites_typeA', 'satellites_typeB']
    
    uncollided = "(collided == 0) or ((collided == 1) and (resolved == 1))"
    galaxy_restricts = [None, "(type == central)", "(type == central)", "(type == central)",\
                        "(type == satellite)", "(type == satellite)", "(type == satellite)"]
    halo_restricts = [None, None, "(N_sat == 0)", "(N_sat > 0)", None, "(N_sat == 1)", "(N_sat > 1)"]
    
    collided_tags = [None, "uncollided_0.4Mpc"]
    space_tags = ['redshift'] #, 'redshift'
    
    # loop over each sample type
    for i, sample_tag in enumerate(sample_tags):
        
        # uncollided vs full
        for collided_tag in collided_tags:
            
            # real and redshift space
            for space_tag in space_tags:
                
                # the ouput tag
                if collided_tag is None:
                    params['output_tag'] = 'PB00halos_%s_%s_space' %(sample_tag, space_tag)
                else:
                    params['output_tag'] = 'PB00halos_%s_%s_%s_space' %(sample_tag, collided_tag, space_tag)
                    
                print "computing power spectrum with tag '%s'..." %params['output_tag']
                # the redshift space boolean
                if 'real' in space_tag:
                    params['redshift_space'] = False
                    params['file_fields'][2] = 'z_real'
                else:
                    params['redshift_space'] = True
                    params['file_fields'][2] = 'z_redshift'
                    
                # the restrictions
                params['galaxy_restrict'] = galaxy_restricts[i]
                if collided_tag is not None:
                    if params['galaxy_restrict'] is not None:
                        params['galaxy_restrict'] = "%s and (%s)" %(params['galaxy_restrict'], uncollided)
                    else:
                        params['galaxy_restrict'] = uncollided
                
                params['halo_restrict'] = halo_restricts[i] 
                
                # write out the parameter file
                params.writeToFile(args.param_file)
                
                # now call the compute_Pkmu script
                if args.power_args is not None:
                    ans = os.system("compute_Pkmu %s %s" %(args.param_file, args.power_args))   
                else:
                    ans = os.system("compute_Pkmu %s" %(args.param_file))
                       
                if ans:
                    raise ValueError("Error computing power spectrum for tag '%s'" %params['output_tag'])
        

#-------------------------------------------------------------------------------    
if __name__ == '__main__':
    
    # parse the input arguments
    desc = "compute P(k, mu) for all samples"
    parser = argparse.ArgumentParser(description=desc)
    
    parser.add_argument('param_file', type=str, help="the parameter file")
    parser.add_argument("power_args", type=str, nargs='?', default=None, help="optional arguments to pass to the compute_Pkmu script")
    args = parser.parse_args()
       
    main(args)
