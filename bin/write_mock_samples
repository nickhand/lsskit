#!/usr/bin/env python
"""
 write_mock_samples
 
 author: Nick Hand
 contact: nhand@berkeley.edu
 creation date: 12/20/2014
"""
from lss import load_catalog
import argparse
import os
from glob import glob

#-------------------------------------------------------------------------------
def main(args):
    """
    Write out a formatted coordinates of the mock
    """
    
    # raise an error if removing collided and using collision weights
    if args.remove_collided and args.use_collision_weights:
        raise ValueError("Cannot remove collided galaxies and use collision weights")
    
    # the restrictions
    uncollided = "(collided == 0) or ((collided == 1) and (resolved == 1))"
    centrals = "(type == central)"
    satellites = "(type == satellite)"
    cen_halo_restricts = {'A' : "(N_sat == 0)", 'B' : "(N_sat > 0)"}
    sat_halo_restricts = {'A' : "(N_sat == 1)", 'B' : "(N_sat > 1)"}
    
    # output columns
    fields = ['x', 'y', 'z_real', 'z_redshift']
    
    files = glob(args.pattern)
    for f in files:
        print "processing %s..." %f
        
        # load
        mock = load_catalog(f)
        
        # file manipulation
        abspath = os.path.abspath(f)
        directory, filename = os.path.split(abspath)
        basename, ext = os.path.splitext(filename)
     
        # clear any restrictions
        mock.clear_restrictions()

        # halo restrictions
        if args.sample == 'cenA':
            mock.restrict_halos(cen_halo_restricts['A'])
        elif args.sample == 'cenB':
            mock.restrict_halos(cen_halo_restricts['B'])
        elif args.sample == 'satA':
            mock.restrict_halos(sat_halo_restricts['A'])
        elif args.sample == 'satB': 
            mock.restrict_halos(sat_halo_restricts['B'])

        # galaxy restrictions
        gal_cond = None
        if 'cen' in args.sample:
            gal_cond = centrals
        elif 'sat' in args.sample:
            gal_cond = satellites
            
        # get only the uncollided galaxies
        if args.remove_collided:
            if gal_cond is not None:
                gal_cond = "(%s) and (%s)" %(gal_cond, uncollided)
            else:
                gal_cond = uncollided
        
        # now restrict
        mock.restrict_galaxies(gal_cond)  
        
        # write out the mock coordinates
        tag = args.sample
        if args.remove_collided:
            tag = "%s_uncollided" %tag
        elif args.use_collision_weights:
            tag = "%s_NN_weights" %tag
        output_file = "%s/%s_%s.dat" %(args.output_dir, basename, tag)
        mock.write_coordinates(output_file, fields, units=args.output_units, 
                                header=None, temporary=False, 
                                replace_with_nearest=args.use_collision_weights)
    
#end main
    
#-------------------------------------------------------------------------------
if __name__ == '__main__':
    
    # parse the input arguments
    desc = "write out the specific mock samples"
    parser = argparse.ArgumentParser(description=desc, 
                            formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    
    h = "the pattern to match mock files on"
    parser.add_argument('pattern', type=str, help=h) 

    h = 'the galaxy sample'
    choices = ['all', 'cen', 'cenA', 'cenB', 'sat', 'satA', 'satB', 'halo']
    parser.add_argument('sample', default='all', choices=choices, help=h)
    
    h = 'output directory to write results to'
    parser.add_argument('--output_dir', type=str, default='.', help=h)
    
    h = 'output units'
    parser.add_argument('--output_units', type=str, choices=['relative', 'absolute'], default='relative', help=h)
    
    h = 'whether to remove collided galaxies (that are not resolved)'
    parser.add_argument('--remove_collided', action='store_true', default=False, help=h)
    
    h = 'whether to use collision weights by double-counting nearest neighbor of '
    h += 'collided galaxies'
    parser.add_argument('--use_collision_weights', action='store_true', default=False, help=h)
    
    args = parser.parse_args()
    main(args)
    
#-------------------------------------------------------------------------------