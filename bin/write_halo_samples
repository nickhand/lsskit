#!/usr/bin/env python
"""
 write_halo_samples
 write out halo samples as an ASCII file
 
 author: Nick Hand
 contact: nhand@berkeley.edu
 creation date: 03/05/2015
"""
from lss import load_catalog
import argparse
import os
from glob import glob
import pandas as pd

#-------------------------------------------------------------------------------
def write_fine_bins(mock, binning_file, fields, units, output_name, which=None):
    """
    Write out the fine bins
    """
    # load the binning file
    bins = pd.read_csv(binning_file, names=['bin', 'min_mass', 'max_mass'],                             sep=' ', index_col='bin')
    
    # determine which bins
    if which is None:
        bin_nums = bins.index
    else:
        if which not in bins.index:
            raise ValueError("Bin number %d is not valid for this binning file" %which)
        bin_nums = [which]
    
    # loop over each bin
    for bin_num in bin_nums:
        
        # clear restrictions
        mock.clear_restrictions()
        
        # restrict by mass
        min_mass = bins.loc[bin_num].min_mass
        max_mass = bins.loc[bin_num].max_mass
        limits = (10**min_mass, 10**max_mass)
        mock.restrict_halos("(mass >= {}) and (mass < {})".format(*limits))

        # write out the mock coordinates
        tag = "fine_halo_bin_%d" %i
                    
        output_file = output_name %tag
        print "   saving %s..." %output_file
        mock.write_coordinates(output_file, fields, units=units, header=None, 
                                temporary=False, replace_with_nearest=False)

#-------------------------------------------------------------------------------
def write_wide_bins(mock, mass_pdf_file, fields, units, output_name, which=None):
    """
    Write out the wide bins, chosen from a distribution of halo masses
    """
    # do cenA, cenB, and sats
    gal_restrict = ["(type == central)", "(type == central)", "(type == satellite)", '(type == central)']
    halo_restrict = ["(N_sat == 0)",  "(N_sat > 0)", "(N_sat == 1)", None]
    tags = ['cenA', 'cenB', 'satA', 'cen']
    
    # load the mock for the mass pdf
    mass_pdf_mock = load_catalog(mass_pdf_file)
    
    # loop over each bin
    for i, (gr, hr) in enumerate(zip(gal_restrict, halo_restrict)):
        
        if which is not None:
            if tags[i] != which:
                continue

        # clear restrictions
        mass_pdf_mock.clear_restrictions()
        mock.clear_restrictions()
        
        # get the masses
        if gr is not None:
            mass_pdf_mock.restrict_galaxies(gr)
        if hr is not None:
            mass_pdf_mock.restrict_halos(hr)
        masses = mass_pdf_mock.sample.mass
        
        # now restrict by the mass pdf
        mock.restrict_by_mass_pdf(masses)
        
        # write out the mock coordinates
        tag = "wide_halo_bin_%s" %tags[i]
                    
        output_file = output_name %tag
        print "   saving %s..." %output_file
        mock.write_coordinates(output_file, fields, units=units, header=None, 
                                temporary=False, replace_with_nearest=False)

#-------------------------------------------------------------------------------
def main(args):
    """
    Write out a formatted coordinates of the mock
    """
    
    # output columns
    fields = ['x', 'y', 'z_real', 'z_redshift']
    
    files = glob(args.pattern)
    for f in files:
        print "processing %s..." %f
        
        # load
        mock = load_catalog(f)
        
        # file manipulation
        abspath = os.path.abspath(f)
        directory, filename = os.path.split(abspath)
        basename, ext = os.path.splitext(filename)
     
        # clear any restrictions
        mock.clear_restrictions()
    
        # the output file name
        output_file = "%s/%s_%s.dat" %(args.output_dir, basename, "%s")
    
        # do the fine halo mass bins
        if args.fine_bins_file is not None:
            write_fine_bins(mock, args.fine_bins_file, fields,
                            args.output_units, output_file,
                            which=args.which_fine_bin)

        # do the wide mass bins
        if args.wide:
            write_wide_bins(mock, args.mass_pdf_file, fields,
                             args.output_units, output_file,
                             which=args.which_wide_bin)
                        
    
#-------------------------------------------------------------------------------
if __name__ == '__main__':
    
    # parse the input arguments
    desc = "write out halo samples as an ASCII file"
    parser = argparse.ArgumentParser(description=desc,      formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    
    h = "the pattern to match mock files on"
    parser.add_argument('pattern', type=str, help=h) 

    h = 'the binning file to use for the fine halo mass bins'
    parser.add_argument('--fine_bins_file', type=str, help=h)
    
    h = 'which fine halo mass bin to do'
    parser.add_argument('--which_fine_bin', type=int, choices=choices, help=h)
    
    h = 'write out the wide halo mass bins'
    parser.add_argument('--wide', action='store_true', help=h)
    
    h = 'which wide halo mass bin to do'
    choices = ['cenA', 'cenB', 'satA', 'cen']
    parser.add_argument('--which_wide_bin', type=str, choices=choices, help=h)
    
    h = 'the mock file for computing the wide mass bins'
    parser.add_argument('--mass_pdf_file', default=None, type=str, help=h)
    
    h = 'output directory to write results to'
    parser.add_argument('--output_dir', type=str, default='.', help=h)
    
    h = 'output units'
    parser.add_argument('--output_units', type=str, choices=['relative', 'absolute'], default='relative', help=h)
    
    args = parser.parse_args()
    main(args)
    
#-------------------------------------------------------------------------------