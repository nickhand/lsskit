#!/usr/bin/env python
"""
 compute_Pkmu
 
 author: Nick Hand
 contact: nhand@berkeley.edu
 creation date: 06/12/2014
"""
import argparse
import os
from utils import pytools
import numpy as np
import sys

from flipper import flipperDict
from lss import pkmu_driver, pkmu_measurement, hod_mock, tools

#-------------------------------------------------------------------------------
def package_results(tag, options_dict, cosmo):
    """
    Package the results
    """
    # delete the original plot
    with pytools.ignored(OSError):
        os.remove('comovingPDT.pdf')
    
    # file names    
    DTPBA_file = options_dict['DTBPAResultsFile']
    CPFA_file  = "cPFitAnalysisTSAL.txt"
    DTF_file   = options_dict['DTFInfoFile']
    Pole_file  = "cPoleFitAnalysisTSAL.txt"

    # check the output files exist; (fuck you Harris, I do exist)
    if not os.path.exists(DTPBA_file):
        raise ValueError("Cannot find '%s' output file" %DTPBA_file)
    if not os.path.exists(CPFA_file):
        raise ValueError("Cannot find '%s' output file" %CPFA_file)
    if not os.path.exists(DTF_file):
        raise ValueError("Cannot find '%s' output file" %DTF_file)

    if options_dict['fit_poles']:
        if not os.path.exists(Pole_file):
            raise ValueError("Cannot find '%s' output file" %Pole_file)
            
    output_files_dir = "output_files"
    with pytools.ignored(OSError):
        os.makedirs(output_files_dir)
    
    power_data_dir = "power_data"
    with pytools.ignored(OSError):
        os.makedirs(power_data_dir)
        
    # now rename the output files
    with pytools.ignored(OSError):
        os.rename(DTPBA_file, "%s/%s_Pdtbpa.dat" %(output_files_dir, tag))
    
    with pytools.ignored(OSError):
        os.rename(CPFA_file, "%s/%s_fitTSAL.dat" %(output_files_dir, tag))
    
    if options_dict['fit_poles']:
        with pytools.ignored(OSError):
            os.rename(Pole_file, "%s/%s_poles_fitTSAL.dat" %(output_files_dir, tag))
    
    # make the header
    header = {}
    for line in open(DTF_file, 'r'):
        fields = line.split('=')
        key = fields[0].strip()
        try:
            value = float(fields[1].strip())
        except:
            value = fields[1].strip()
        header[key] = value
    header['space'] = options_dict['space']

    with pytools.ignored(OSError):
        os.remove(DTF_file)
    with pytools.ignored(OSError):
        os.remove(options_dict['CosmoParamsFile'])
    
    # make the PkmuMeasurement object and save it
    poles_tsal = "%s/%s_poles_fitTSAL.dat" %(output_files_dir, tag) if options_dict['fit_poles'] else None
    cpm_tsal   = "%s/%s_Pdtbpa.dat" %(output_files_dir, tag)
    pkmu       = pkmu_pandas_wrapper.PkmuMeasurement(cpm_tsal, options_dict['units'], poles_tsal=poles_tsal, cosmo=cosmo, **header)
        
    # now save it   
    pkmu.save("%s/%s_Pkmu.dat" %(power_data_dir, tag))

#end package_results

#-------------------------------------------------------------------------------
def set_cosmo_options(cosmo, options_dict):
    """
    Add the necessary cosmology parameter options to the dictionary
    """  
    options_dict['default_omega_b'] = cosmo.omegab * cosmo.h**2
    options_dict['default_omega_cdm'] = cosmo.omegac * cosmo.h**2
    options_dict['default_omega_de'] = cosmo.omegal * cosmo.h**2
    options_dict['default_A_s'] = -1. # so that we use sigma8 instead
    options_dict['default_n_s'] = cosmo.n
    options_dict['default_tau'] = cosmo.tau
    options_dict['default_sigma_8'] = cosmo.sigma_8

#end set_cosmo_options

#-------------------------------------------------------------------------------
def compute_Pkmu(args):
    """
    Compute P(k, mu)
    """
    # first, set up the options dict to send
    # convert arguments to a dictionary
    options_dict = {k : v for k, v in vars(args).iteritems() if v is not None}
    
    # pop certain args
    show_help = options_dict.pop('show_help')
    param_file = options_dict.pop('param_file')
    log = options_dict.pop('log')
    no_package = options_dict.pop('no_package')
    
    # only showing the help message
    if show_help:
        pkmu_driver.compute_PB_Pkmu(None, show_help=show_help)
        return    
        
    # first, write out the coordinates file
    params = flipperDict.flipperDict()
    params.readFromFile(param_file)
    
    tag = params['output_tag']
    
    # if real space, set velocity bias to zero
    if not params['redshift_space']:
        options_dict['TPT_free_eta_bias'] = 0
        options_dict['b_eta'] = 0.
    
    # redirect stdout ouput if we are logging
    logs_dir = "logs"
    if log:
        with pytools.ignored(OSError):
            os.makedirs(logs_dir)
        stdout = open("%s/%s.log" %(logs_dir, tag), 'w')
        sys.stdout = stdout
    else:
        with pytools.ignored(OSError):
            os.remove("%s/%s.log" %(logs_dir, tag))
        stdout = None
    
    # the dirty work
    object_file = ""
    
    # set the output cosmo params file
    options_dir = "options"
    with pytools.ignored(OSError):
        os.makedirs(options_dir)
    options_dict['CosmoParamsFile'] = "%s/%s.cosmo" %(options_dir, tag)
    options_dict['config'] = "%s/%s.config" %(options_dir, tag)
    
    # don't need the mock file
    if params['mock_file'] is None or not params.get('use_mock', True):
        
        # using the default cosmology here
        options_dict['default_A_s'] = -1. # use default sigma_8
        
        # compute P(k,mu) with a generated data set (since `object_file = None`)
        pkmu_driver.compute_PB_Pkmu(None, options=options_dict, show_help=False, stdout=stdout)
        
        # read default cosmo params
        cosmo = tools.cosmo_from_config(os.path.abspath(options_dict['CosmoParamsFile']))
    
    # need the mock file
    else:

        print "loading mock catalog..."
        mock = hod_mock.load(params['mock_file'])
        cosmo = mock.cosmo
        
        # set the restrictions
        if params['galaxy_restrict'] is not None:
            mock.restrict_galaxies(params['galaxy_restrict'])

        if params['halo_restrict'] is not None:
            mock.restrict_halos(params['halo_restrict'])
        
        # set the subsample 
        if params.get('random_subsample', 0) > 0:
            mock.random_subsample(params['random_subsample'])
    
        try:
            if params.get('object_file', None) is None:
    
                # now write the temporary coordinate file
                object_file = mock.write_coordinates(None, params['file_fields'], 
                                                     units=params['file_units'], 
                                                     header=params['header'], 
                                                     temporary=True,
                                                     replace_with_nearest=params['replace_with_nearest'])
                
            else:
                object_file = params['object_file']
    
            # add the cosmology parameters to the options dict
            set_cosmo_options(mock.cosmo, options_dict)

            # call the P(k, mu) code
            pkmu_driver.compute_PB_Pkmu(object_file, options=options_dict, show_help=False, stdout=stdout)

        except:
            raise 
        finally:
            with pytools.ignored(OSError):
                os.remove(object_file)

    if not no_package:
    
        # add some options for use in the header
        options_dict['units'] = params['file_units']
        options_dict['space'] = 'redshift' if params['redshift_space'] else 'real'

        # now package the results
        package_results(tag, options_dict, cosmo)
            
#end compute_Pkmu


#-------------------------------------------------------------------------------
if __name__ == '__main__':
    
    # parse the input arguments
    desc = "wrapper for Pat McDonald's P(k, mu) code for periodic boxes"
    parser = argparse.ArgumentParser(description=desc, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    
    #---------------------------------------------------------------------------
    # arguments not passed to the ``measure_and_fit_discrete`` command
    #---------------------------------------------------------------------------
    parser.add_argument('param_file', type=str, help="the parameter file")
    
    h = 'whether to only show the help message of the P(k, mu) code'
    parser.add_argument('--show_help', action='store_true', default=False, help=h)
    
    h = 'whether to log the output to a log file'
    parser.add_argument('--log', action='store_true', default=False, help=h)
    
    h = "don't package the results nicely"
    parser.add_argument('--no_package', action='store_true', default=False, help=h)
    
    
    #---------------------------------------------------------------------------
    # Command-line options for ``measure_and_fit_discrete``
    #---------------------------------------------------------------------------
    
    #---------------------------------------------------------------------------
    # Discrete Tracer Band Power Theory parameters
    #---------------------------------------------------------------------------
    dtbpt = parser.add_argument_group("Discrete Tracer Band Power Theory")
    
    h = 'the number of cells per side of the box for the density field'
    dtbpt.add_argument('--Ncells', dest='DTBPT_Ncells', type=int, default=128, help=h)
    
    h = "the density field sampling technique. Either 'NGP' or 'CIC'"
    dtbpt.add_argument('--sampling', dest='DTBPT_sampling', choices=['NGP', 'CIC'], default='NGP', help=h)
    
    #---------------------------------------------------------------------------
    # Band Power Theory parameters
    #---------------------------------------------------------------------------
    bpt = parser.add_argument_group("Band Power Theory")
    
    h = 'whether to also fit the monopole/quadrupole multipoles'
    bpt.add_argument('--fit_poles', choices=[0, 1], default=0, type=int, help=h)
    
    h = 'the maximum k value to compute in 1/Mpc'
    bpt.add_argument('--kmax', dest='BPT_kmax', type=float, default=0.2, help=h)
    
    h = 'the minimum k value to compute in 1/Mpc'
    bpt.add_argument('--kmin', dest='BPT_kmin', type=float, default=0., help=h)
     
    h = 'the linear band width in 1/Mpc'
    bpt.add_argument('--dk', dest='BPT_dk', type=float, default=0.01, help=h)
    
    h = 'the natural logarithmic band width in 1/Mpc'
    bpt.add_argument('--dlnk', dest='BPT_dlnk', type=float, default=0.02/0.3, help=h)
    
    h = 'the number of mu bins to compute'
    bpt.add_argument('--Nmu', dest='BPT_Nmu', type=int, default=5, help=h)

    h = 'whether to switch from linear to log spaced bands when log bins become larger'
    bpt.add_argument('--use_linlog_spacing', choices=[0, 1], default=0, type=int, help=h)
    
    h = 'use log spaced bands starting at k_min'
    bpt.add_argument('--use_log_spacing', choices=[0, 1], default=0, type=int, help=h)
    
    h = "use parallel Pkmu mode measurement in FourierBandPowerTheory"
    bpt.add_argument('--parallel_form', choices=[0, 1], default=0, type=int, help=h)         
    
    #---------------------------------------------------------------------------
    # parameters for fitting the bias model
    #---------------------------------------------------------------------------
    model = parser.add_argument_group("Model Fitting")
    
    h = 'Max order in k for short-range non-locality (only even powers used)'
    model.add_argument('--k_order', type=int, default=2, help=h)
    
    h = 'Max order in k_parallel for short-range non-locality (only even powers used)'
    model.add_argument('--kpar_order', type=int, default=2, help=h)
    
    h = 'In TracerPowerTheory, make eta bias (velocity bias) a free param'
    model.add_argument('--vary_eta_bias', dest='TPT_free_eta_bias', choices=[0,1], default=1, type=int, help=h)
    
    h = 'The default value for EtaBiasParam (velocity bias)'
    model.add_argument('--default_b_eta', dest='b_eta', type=float, default=1., help=h)
    
    h = 'In TracerPowerTheory, make noise a free param'
    model.add_argument('--vary_noise', dest='TPT_free_noise', choices=[0,1], default=1, type=int, help=h)
    
    h = 'White noise power in low-k limit [Mpc^3]'
    model.add_argument('--shot_noise', dest='LSSNoise', type=float, default=5000., help=h)
    
    h = 'Whether to correct for the mass assignment window function'
    model.add_argument('--correct_window', dest='TBPT_cellcorrect', choices=[0,1], default=1, type=int, help=h)
    
    h = 'Whether to correct for the aliasing of shot noise'
    model.add_argument('--correct_aliasing', dest='CBPT_default_aliascorrect', choices=[0,1], default=1, type=int, help=h)
        
    h = 'After initial band measurement and fit, rerun this many times to re-estimate errors and refit'
    model.add_argument('--reruns', type=int, default=1, help=h)
    
    #---------------------------------------------------------------------------
    # sample parameters if we aren't reading from file
    #---------------------------------------------------------------------------
    mock = parser.add_argument_group("Mock Data Set")
    
    h = 'In DatAnDriverWTestGen, default setting for whether or not to make test data.'
    mock.add_argument('--make_test_data', type=int, default=0, choices=[0,1], help=h)
    
    h = 'The size of the box in Mpc'
    mock.add_argument('--box_L', dest='Box_L', type=float, default=2000., help=h)
    
    h = 'The number of cells per side in GriddedBox'
    mock.add_argument('--box_N', dest='Box_N', type=int, default=128, help=h)
    
    h = 'The redshift of SimFields'
    mock.add_argument('--redshift', dest='Sim_z', type=float, default=1., help=h)
    
    h = 'In TracerFieldGenerator, default number density, per cubic Mpc'
    mock.add_argument('--default_n_Mpc', dest='DTFG_default_n_Mpc', type=float, default=2e-4, help=h)
    
    h = 'In DiscreteTracerFieldGenerator, if this is true, just distribute the ' + \
        "points completely randomly within a box, with total number generated by " + \
        "Poisson sampling the mean total"
    mock.add_argument('--pure_Poisson_noise', choices=[0, 1], default=0, type=int, help=h)
    
    #---------------------------------------------------------------------------
    # verbosity arguments
    #---------------------------------------------------------------------------
    verbose = parser.add_argument_group("Verbosity")
    
    h = 'GSL_PSMinimizer: verbosity level'
    verbose.add_argument('--GSLPSM_verbose', choices=[0, 1, 2], default=0, type=int, help=h)    
    
    h = 'LikelihoodFromDataTheory: verbosity level'
    verbose.add_argument('--LFDT_verbose', choices=[0, 1, 2], default=0, type=int, help=h)
    
    h = 'K-mu Band Power Theory: verbosity level'
    verbose.add_argument('--KMBPT_verbose', choices=[0, 1, 2], default=0, type=int, help=h)
    
    h = 'FourierBandPowerTheory: verbosity level'
    verbose.add_argument('--FBPT_verbose', choices=[0, 1, 2], type=int, default=0, help=h)         
    
    h = 'TaylorSeriesApproximatedLikelihood: verbosity level'
    verbose.add_argument('--TSAL_verbose', choices=[0, 1, 2], type=int, default=0, help=h)
    
    #---------------------------------------------------------------------------
    # output file names
    #---------------------------------------------------------------------------
    output = parser.add_argument_group("Output Files")
    
    h = "File to print DiscreteTracerField information to"
    output.add_argument('--sample_info', dest='DTFInfoFile', type=str, default='DTF_info.txt', help=h)
    
    h = "File to print DiscreteTracerBandPowerAnalysis results as TSAL"
    output.add_argument('--Pkmu_output', dest='DTBPAResultsFile', type=str, default='Pdtbpa.cbpm', help=h)
     
    #---------------------------------------------------------------------------
    args = parser.parse_args()
    compute_Pkmu(args)
    
#-------------------------------------------------------------------------------
#end main

